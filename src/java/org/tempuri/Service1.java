/*
*
*/

package org.tempuri;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 2.2.9
 * Mon Mar 21 15:00:56 PDT 2011
 * Generated source version: 2.2.9
 */


@WebServiceClient(name = "Service1",
        wsdlLocation = "https://ecom.quikstor.com/eCom3ServiceSS/QuikStorWebServiceSS.asmx?WSDL",
        targetNamespace = "http://tempuri.org/")
public class Service1 extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://tempuri.org/", "Service1");
    public final static QName Service1Soap12 = new QName("http://tempuri.org/", "Service1Soap12");
    public final static QName Service1Soap = new QName("http://tempuri.org/", "Service1Soap");
    public final static QName Service1HttpPost = new QName("http://tempuri.org/", "Service1HttpPost");
    public final static QName Service1HttpGet = new QName("http://tempuri.org/", "Service1HttpGet");

    static {
        URL url = null;
        try {
            url = new URL("https://ecom.quikstor.com/eCom3ServiceSS/QuikStorWebServiceSS.asmx?WSDL");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from https://ecom.quikstor.com/eCom3ServiceSS/QuikStorWebServiceSS.asmx?WSDL");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public Service1(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Service1(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Service1() {
        super(WSDL_LOCATION, SERVICE);
    }


    /**
     * @return returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap12")
    public Service1Soap getService1Soap12() {
        return super.getPort(Service1Soap12, Service1Soap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap12")
    public Service1Soap getService1Soap12(WebServiceFeature... features) {
        return super.getPort(Service1Soap12, Service1Soap.class, features);
    }

    /**
     * @return returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap")
    public Service1Soap getService1Soap() {
        return super.getPort(Service1Soap, Service1Soap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap")
    public Service1Soap getService1Soap(WebServiceFeature... features) {
        return super.getPort(Service1Soap, Service1Soap.class, features);
    }

    /**
     * @return returns Service1HttpPost
     */
    @WebEndpoint(name = "Service1HttpPost")
    public Service1HttpPost getService1HttpPost() {
        return super.getPort(Service1HttpPost, Service1HttpPost.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns Service1HttpPost
     */
    @WebEndpoint(name = "Service1HttpPost")
    public Service1HttpPost getService1HttpPost(WebServiceFeature... features) {
        return super.getPort(Service1HttpPost, Service1HttpPost.class, features);
    }

    /**
     * @return returns Service1HttpGet
     */
    @WebEndpoint(name = "Service1HttpGet")
    public Service1HttpGet getService1HttpGet() {
        return super.getPort(Service1HttpGet, Service1HttpGet.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns Service1HttpGet
     */
    @WebEndpoint(name = "Service1HttpGet")
    public Service1HttpGet getService1HttpGet(WebServiceFeature... features) {
        return super.getPort(Service1HttpGet, Service1HttpGet.class, features);
    }

}
